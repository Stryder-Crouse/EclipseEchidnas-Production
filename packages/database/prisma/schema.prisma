// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// example table used in the express router example
model HighScore {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

model NodeDB {
  nodeID    String @id @db.VarChar(256)
  floor     String @db.VarChar(256)
  building  String @db.VarChar(256)
  nodeType  String @db.VarChar(256)
  longName  String @db.VarChar(256)
  shortName String @db.VarChar(256)
  xcoord    Int
  ycoord    Int

  // These do not exist @relation tells prisma to now make an attribute and instead
  // relate the other table to this table through the specified key
  startEdges  EdgeDB[]         @relation("startingEdges")
  endEdges    EdgeDB[]         @relation("endingEdges")
  reqLocation ServiceRequest[] @relation("requestLocation") // must change to Request later
}

model EdgeDB {
  edgeID      String @id @db.VarChar(256)
  startNodeID String @db.VarChar(256)
  endNodeID   String @db.VarChar(256)

  // Do not exist (but necessary for tables)
  startNode NodeDB @relation("startingEdges", fields: [startNodeID], references: [nodeID])
  endNode   NodeDB @relation("endingEdges", fields: [endNodeID], references: [nodeID])
}

model MedReq {
  medReqID Int    @id @unique @default(autoincrement())
  medType  String @db.VarChar(256)
  dosage   String @db.VarChar(256)
  numDoses Int
  genReqID Int    @unique

  genReq ServiceRequest @relation("genericRequest", fields: [genReqID], references: [reqID])
}

// making new request table example
// model FlowerReq {
//   medReqID Int    @id @unique @default(autoincrement())
//   medType  String @db.VarChar(256)
//   dosage   String @db.VarChar(256)
//   numDoses Int
//
//
//   genReqID Int    @unique
//
//   genReq ServiceRequest @relation("FlowerReq", fields: [genReqID], references: [reqID])
// }
model ReligiousReq {
  religReqID     Int    @id @unique @default(autoincrement())
  patientName    String @db.VarChar(256)
  religion       String @db.VarChar(256)
  reqDescription String @db.VarChar(256)

  genReqID       Int    @unique

  genReq ServiceRequest @relation("religiousReqGeneric", fields: [genReqID], references: [reqID])
}

model ServiceRequest {
  reqID         Int     @id @unique @default(autoincrement())
  reqType       String  @db.VarChar(256)
  reqLocationID String  @db.VarChar(256)
  extraInfo     String  @db.VarChar(256)
  status        String  @db.VarChar(256)
  assignedUName String? @db.VarChar(256)
  reqPriority   String  @db.VarChar(256)

  // not actually here
  medReq           MedReq?           @relation("genericRequest")
  outsideTransport outsideTransport? @relation("outsideTransport")
  religReq         ReligiousReq?      @relation("religiousReqGeneric")
  // making new request table example
  // flowReq      FlowerReq?   @relation("FlowerReq")
  reqLocation      NodeDB            @relation("requestLocation", fields: [reqLocationID], references: [nodeID])
  assigned         Employee?         @relation("assignedEmployee", fields: [assignedUName], references: [userName])
}

model Employee {
  userName    String  @id @unique @db.VarChar(256)
  firstName   String  @db.VarChar(256)
  lastName    String  @db.VarChar(256)
  designation String  @db.VarChar(256)
  isAdmin     Boolean

  // This DOES NOT EXIST - DON'T try to use it!!
  //@relation tells prisma to now make an attribute and instead
  // relate the other table to this table through the specified key
  assignedTasks ServiceRequest[] @relation("assignedEmployee")
}

model outsideTransport {
  // do not need a patient room since this will be the location of the request
  outsideTransportID Int    @id @unique @default(autoincrement())
  patientName        String @db.VarChar(256)
  destination        String @db.VarChar(256)
  modeOfTransport    String @db.VarChar(256)
  serviceReqID       Int    @unique

  serviceReq ServiceRequest @relation("outsideTransport", fields: [serviceReqID], references: [reqID])
}
