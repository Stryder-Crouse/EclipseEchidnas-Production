// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// example table used in the express router example
model HighScore {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

model NodeDB {
  nodeID    String @id @db.VarChar(256)
  floor     String @db.VarChar(256)
  building  String @db.VarChar(256)
  nodeType  String @db.VarChar(256)
  longName  String @db.VarChar(256)
  shortName String @db.VarChar(256)
  xcoord    Int
  ycoord    Int

  // These do not exist @relation tells prisma to now make an attribute and instead
  // relate the other table to this table through the specified key
  startEdges  EdgeDB[]         @relation("startingEdges")
  endEdges    EdgeDB[]         @relation("endingEdges")
  reqLocation ServiceRequest[] @relation("requestLocation") // must change to Request later
}

model EdgeDB {
  edgeID      String @id @db.VarChar(256)
  startNodeID String @db.VarChar(256)
  endNodeID   String @db.VarChar(256)

  // Do not exist (but necessary for tables)
  startNode NodeDB @relation("startingEdges", fields: [startNodeID], references: [nodeID])
  endNode   NodeDB @relation("endingEdges", fields: [endNodeID], references: [nodeID])
}

model MedReq {
  medReqID Int    @id @default(autoincrement())
  medType  String @db.VarChar(256)
  dosage   String @db.VarChar(256)
  numDoses Int

  genReq   ServiceRequest @relation("genericRequest", fields: [genReqID], references: [reqID])
  genReqID Int            @unique
}

model ServiceRequest {
  reqID         Int      @id @unique @default(autoincrement())
  reqType       String   @db.VarChar(256)
  // start "nodeID" foreign key
  reqLocation   NodeDB   @relation("requestLocation", fields: [reqLocationID], references: [nodeID])
  reqLocationID String   @db.VarChar(256)
  // end "nodeID" foreign key
  extraInfo     String   @db.VarChar(256)
  status        String   @db.VarChar(256)
  // start "userName" foreign key
  assigned      Employee @relation("assignedEmployee", fields: [assignedUName], references: [userName])
  assignedUName String   @db.VarChar(256)
  // end "userName" foreign key

  //not actually here B]
  medReq MedReq? @relation("genericRequest")
}

model Employee {
  userName    String  @id @db.VarChar(256)
  firstName   String  @db.VarChar(256)
  lastName    String  @db.VarChar(256)
  designation String  @db.VarChar(256)
  isAdmin     Boolean

  //This does not exist @relation tells prisma to now make an attribute and instead
  // relate the other table to this table through the specified key
  assignedTasks  ServiceRequest[] @relation("serviceRequest")
}
